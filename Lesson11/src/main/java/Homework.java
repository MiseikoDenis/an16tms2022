public class Homework {
    /**
     * 1) Вырезать подстроку из строки начиная с первого вхождения символа(А) до, последнего вхождения сивола(B).
     *
     * 2) Заменить все вхождения символа стоящего в позиции (3) на символ стоящий в позиции 0
     *
     * 3) В массиве находятся слова. Вывести на экран слова палиндромы
     * (т.е которые читаются справа на лево и слева на право одинаково, например: заказ, казак, дед...)
     *
     * 4) Есть строка в которой содержится текст, предложения разделены точками.
     * После запуска программы на экран должны выводиться только те предложения в которых от 3-х до 5-ти слов.
     * Если в предложении присутствует слово-палиндром, то не имеет значения какое количество слов в предложении, оно выводится на экран.
     * Пишем все в ООП стиле.
     * 1. Метод принимает строку и возвращает кол-во слов в строке.
     * 2. Метод принимает строку и проверяет есть ли в строке слово-палиндром. Если есть возвращает true, если нет false
     * В main создаем строку с текстом, также можно текст задавать с консоли.
     * Разбиваем текст на предложения. Используя методы класса TextFormatter определяем подходит ли нам предложение.
     * Если подходит, то выводим на экран.
     *
     * 5)Даны строки разной длины (длина - четное число), необходимо вернуть ее два средних знака:
     * Пример: "string" → "ri", "code" → "od", "Practice"→"ct".
     *
     * 6)Создать класс Employee, у которого есть переменные класса - String fullname, double salary.
     * Создать массив содержащий несколько объектов этого типа. Создать класс Report (по возможности интерфейс),
     * который будет содержать метод generateReport, в котором выводится информация о зарплате всех сотрудников.
     * Используйте форматировании строк(https://javarush.ru/quests/lectures/questmultithreading.level02.lecture06)
     * Пусть salary будет выровнено по правому краю, десятичное значение имеет 2 знака после запятой и по одной первой букве имени и отчества через точки.
     * Пример: | Л.Н. Толстой		|		200.34|
     *
     * 7) Даны строки разной длины c четным числом символов(казаки, просмотреть, диванчик, малярный),
     *  необходимо вернуть ее два средних знака.
     * Например, если дана строка "string"  результат будет "ri", для строки "code" результат "od",  для "Practice" результат "ct".
     *
     * 8*(Можно не делать!))Найти количество слов, содержащих только символы латинского алфавита. Пример:
     * "Методы доступа называют ещё аксессорами (от англ. access — доступ), или по отдельности — геттерами (англ. get — чтение) and сеттерами (англ. set — запись)"
     */

    /*
     * По  регулярным выражениям!
     * 2) Дана строка "cab, ccab, cccab" Необходимо составить регулярное выражение, сделать класс Pattern, Matcher, вызвать метод find и вывести слова на консоль
     * Должно вывести:
     * cab
     * ccab
     * cccab
     *
     * 3) Дана строка "Versions: Java  5, Java 6, Java   7, Java 8, Java 12."  Найти все подстроки "Java X", где X - число и распечатать их.
     *
     * 4*)со звездочкой! Предложение состоит из нескольких слов, разделенных пробелами. Например: "One two three раз два три one1 two2 123 ".
     *  Найти количество слов, содержащих только символы латинского алфавита.
     *  Необходимо составить регулярное выражение и вызвать его в методе split(Regexp)
     *  String str = "One two three раз два три one1 two2 123 ";
     *  System.out.println(str.split("регулярное выражение").length);
     *  Подсказка: тут надо использовать:
     *  1) группы ()
     *  2) | - оператор или
     *  3) [] - группировки символов
     *  4) +,* - квантификаторы
     *
     *  PS: Кто не сможет осилить регулярное выражение, то сделайте как сможете!
     *
     *  5*)со звездочкой! В метод на вход приходит строка
     *
     *  public static boolean validate(String str) {
            return false;
        }
     * Необходимо выполнить проверку на валидацию входящей строки и вернуть false или true
     * - Строка должна содержать только маленькие латинские буквы и цифры 1 или 5 без знака подчеркивания.
     * - Длина строки должна быть от 4 до 20 символов.
     *
     * PS: нужно посмотреть презентацию страница 44 (Метасимволы для группировки символов)
     *
     * */

}
